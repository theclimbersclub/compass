name: Elixir CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests ${{ matrix.name }} - Experimental ${{ matrix.experimental }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        elixir: [1.10.3]
        otp: [22.2.7]
        experimental: [false]
        name: ["stable"]
        include:
          - elixir: 1.11.3
            otp: 23.2
            experimental: true
            name: "latest"
    continue-on-error: ${{ matrix.experimental }}

    services:
      postgres:
        image: postgres:13
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: compass_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v2

      - name: "Setup Elixir"
        uses: erlef/setup-elixir@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 14.15.4

      - name: Cache global mix
        uses: actions/cache@v1
        with:
          path: ~/.mix
          key: cache-${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}
          restore-keys: cache-${{ runner.os }}-mix-

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: deps
          key: cache-${{ runner.os }}-deps-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: cache-${{ runner.os }}-deps-

      - uses: actions/cache@v1
        id: build-cache
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Find yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |-
          mix deps.get
          mix deps.compile
          yarn --cwd assets
      - name: Check formatting
        run: mix format --check-formatted
      - name: Run Tests
        run: mix test
        env:
          POSTGRES_USER: postgres
          POSTGRESS_PASSWORD: postgres
          POSTGRES_HOST: localhost

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        # actions/checkout@v2 only checks out the latest commit,
        # so we need to tell it to check out the entire branch
        with:
          ref: main
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8.1

      - uses: mhanberg/gigalixir-action@0.4.3
        with:
          GIGALIXIR_USERNAME: ${{ secrets.GIGALIXIR_USERNAME }}
          GIGALIXIR_PASSWORD: ${{ secrets.GIGALIXIR_PASSWORD }}
          GIGALIXIR_APP: compass
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          MIGRATIONS: true
